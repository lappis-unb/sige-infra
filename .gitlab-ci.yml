image:
  name: hashicorp/terraform
  entrypoint: ['']

variables:
  TF_ROOT: ${CI_PROJECT_DIR}/terraform
  TF_STATE_NAME: 'terraform.tfstate'
  TF_ADDRESS: 'https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/terraform/state/${TF_STATE_NAME}'
  TF_USERNAME: ${GITLAB_USERNAME}
  TF_PASSWORD: ${TF_ACCESS_TOKEN}

cache:
  - key: $CI_PIPELINE_ID-terraform-cache
    paths:
      - ${TF_ROOT}/.terraform/
      - ${TF_ROOT}/.terraform.lock.hcl

stages:
  - setup
  - plan
  - apply
  - destroy

before_script:
  - terraform --version
  - cd ${TF_ROOT}
  - echo "TF_ROOT = ${TF_ROOT}"
  - echo "Listar arquivos no diret√≥rio"
  - pwd
  - ls -la

format:
  stage: setup
  script:
    - terraform fmt
  cache: []
  allow_failure: true

init:
  stage: setup
  script:
    - terraform init
      -backend-config=address=${TF_ADDRESS}
      -backend-config=lock_address=${TF_ADDRESS}/lock
      -backend-config=unlock_address=${TF_ADDRESS}/lock
      -backend-config=username=${TF_USERNAME}
      -backend-config=password=${TF_PASSWORD}
      -backend-config=lock_method=POST
      -backend-config=unlock_method=DELETE
      -backend-config=retry_wait_min=5

validate:
  stage: setup
  script:
    - terraform validate
  allow_failure: true

apply_infra:
  stage: apply
  script:
    - export TF_VAR_do_token=${DIGITALOCEAN_ACCESS_TOKEN}
    - export TF_VAR_ssh_key=${PUBLIC_SSH_KEY}
    - terraform apply -auto-approve
  artifacts:
    name: '$CI_JOB_NAME'
    paths:
      - ./hosts
    expire_in: 6 hours
  when: manual

destroy_infra:
  stage: destroy
  script:
    - export TF_VAR_do_token=${DIGITALOCEAN_ACCESS_TOKEN}
    - terraform destroy -auto-approve
  when: manual
